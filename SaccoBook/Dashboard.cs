using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Newtonsoft.Json.Linq;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using DevExpress.XtraTreeList.Columns;
using DevExpress.LookAndFeel;
using Newtonsoft.Json;
using DevExpress.XtraSplashScreen;
using DevExpress.Utils.Menu;
using DevExpress.XtraGrid.Views.Grid;

namespace SaccoBook
{
    public partial class Dashboard : DevExpress.XtraEditors.XtraForm
    {
        public static bool IsUserMasterAdmin = false;
        static string MembershipNumber = null;
        static string MembershipType = null;
        static string SavingsWithdrawalDocumentNo = null;
        static string SavingsWithdrawalDocumentType = null;
        static string LoanDocumentNo = null;

        Timer timer = new Timer();
        public Dashboard()
        {
            InitializeComponent();           
        }
        public Dashboard(string RoleId)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();          
            
            DefineUserRole(RoleId);

            LoadTable();

            barStaticItem_OrganizationName.Caption = AppResources.AppConstants.GetSoftwareName();

            ribbonPageGroup4SHG.Text = "Sacco Book";

            barStaticItem_LoggedInUser.Caption = Login.LoggedInUser;

            //////////////////////////////////////////////////////////////////////////////

            // hide Shares & Expenses

            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[0]);//Reports
            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[1]); //Members
            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[2]); //savings
            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[3]); //Loans
            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[4]); //Shares x Dividends
            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[5]); //Expenses
            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[6]); //System

            //////////////////////////////////////////////////////////////////////////////

            //navigationFrame1.Pages.Remove(navigationFrame1.Pages[5]); //Expenses

           // navigationFrame1.Pages.Remove(navigationFrame1.Pages[4]); //Shares x Dividends


            //MembersNavigationTree.ExpandAll();
            //ReportsNavigationTree.ExpandAll();
            //SavingsNavigationTree.ExpandAll();
            //LoansNavigationTree.ExpandAll();

            //////////////////////////////////////////////////////////////////////////////
            ///
            //Best fit for culumns
            gridViewLoans.BestFitColumns();
            MembersGridView.BestFitColumns();
            gridViewSavings.BestFitColumns();

            treeListGL.ExpandAll();
            treeListGL.BestFitColumns();


            StartApp();
        }
        private void LoadTable()
        {
            //Load Members List
            string sqlMembers = EF.MemberQueries.LoadMembersRecords();

            AppResources.AppFunctions.LoadTable(MembersGridControl, MembersGridView, sqlMembers);

            //Load open savings records

            string sqlSavings = EF.SavingsQueries.LoadDashSavingsWithdrawalsRecords("Open");

            AppResources.AppFunctions.LoadTable(gridControlSavings, gridViewSavings, sqlSavings);

            //Load open savings records

            string sqlLoans= EF.LoansQueries.LoadLoanDisbursementEntries("Open");

            AppResources.AppFunctions.LoadTable(gridControlLoans, gridViewLoans, sqlLoans);

            //Load GL accounts
            string sqlGLAccounts = EF.GeneralLedgerQueries.GetGeneralLedgerAccounts();

            AppResources.AppFunctions.LoadTreeList(treeListGL, sqlGLAccounts);
            SetTreeListFormatRules(treeListGL);
        }
        private void DefineUserRole(string RoleId)
        {
            bool IsMasterAdmin = false;
            
            //Get User Role Properties
            string GetuserRoleInfoResponse = EF.UserRoleQueries.GetuserRoleInfo(RoleId);
            dynamic GetuserRoleInfoResponseObject = JObject.Parse(GetuserRoleInfoResponse);
           
           
            string _IsMasterAdmin = GetuserRoleInfoResponseObject.IsMasterAdmin;
            IsMasterAdmin = bool.Parse(_IsMasterAdmin);
            IsUserMasterAdmin = IsMasterAdmin;
            //Declare variables for navigation
            bool CanAddUser = false;
            bool CanAddKin = false;
            bool CanViewMemberProfile = false;
            bool CanEditUser = false;
            bool CanDeleteUser = false;
            //Savings Functionalities
            bool CanAddSavings = false;
            bool CanAddWithdrawal = false;
            bool CanAddBulkSavings = false;
            //Loans Functionalities
            bool CanAddLoan = false;
            bool CanAddLoanRepayment = false;
            bool CanViewRepaymentHistory = false;
            bool CanViewLoanGuarantors = false;
            bool CanEditLoan = false;
            bool CanDeleteLoan = false;
            //Shares Functionalities
            bool CanAddShares = false;
            bool CanViewShares = false;
            //Expenses Functionalities
            bool CanAddExpenses = false;
            bool CanEditExpenses = false;
            bool CanDeleteExpenses = false;

            //if Role is not a master Admin, set features role allows to access
            if (!IsMasterAdmin)
            {
                //Members Functionalities
                string _CanAddUser = GetuserRoleInfoResponseObject.CanAddUser;
                string _CanAddKin = GetuserRoleInfoResponseObject.CanAddKin;
                string _CanViewMemberProfile = GetuserRoleInfoResponseObject.CanViewMemberProfile;
                string _CanEditUser = GetuserRoleInfoResponseObject.CanEditUser;
                string _CanDeleteUser = GetuserRoleInfoResponseObject.CanDeleteUser;
                //Savings Functionalities
                string _CanAddSavings = GetuserRoleInfoResponseObject.CanAddSavings;
                string _CanAddWithdrawal = GetuserRoleInfoResponseObject.CanAddWithdrawal;
                string _CanAddBulkSavings = GetuserRoleInfoResponseObject.CanAddBulkSavings;
                //Loans Functionalities
                string _CanAddLoan = GetuserRoleInfoResponseObject.CanAddLoan;
                string _CanAddLoanRepayment = GetuserRoleInfoResponseObject.CanAddLoanRepayment;
                string _CanViewRepaymentHistory = GetuserRoleInfoResponseObject.CanViewRepaymentHistory;
                string _CanViewLoanGuarantors = GetuserRoleInfoResponseObject.CanViewLoanGuarantors;
                string _CanEditLoan = GetuserRoleInfoResponseObject.CanEditLoan;
                string _CanDeleteLoan = GetuserRoleInfoResponseObject.CanDeleteLoan;
                //Shares Functionalities
                string _CanAddShares = GetuserRoleInfoResponseObject.CanAddShares;
                string _CanViewShares = GetuserRoleInfoResponseObject.CanViewShares;
                //Expenses Functionalities
                string _CanAddExpenses = GetuserRoleInfoResponseObject.CanAddExpenses;
                string _CanEditExpenses = GetuserRoleInfoResponseObject.CanEditExpenses;
                string _CanDeleteExpenses = GetuserRoleInfoResponseObject.CanDeleteExpenses;

                //parse to boolean

                CanAddUser = bool.Parse(_CanAddUser);
                CanAddKin = bool.Parse(_CanAddKin);
                CanViewMemberProfile = bool.Parse(_CanViewMemberProfile);
                CanEditUser = bool.Parse(_CanEditUser);
                CanDeleteUser = bool.Parse(_CanDeleteUser);
                //Savings Functionalities
                CanAddSavings = bool.Parse(_CanAddSavings);
                CanAddWithdrawal = bool.Parse(_CanAddWithdrawal);
                CanAddBulkSavings = bool.Parse(_CanAddBulkSavings);
                //Loans Functionalities
                CanAddLoan = bool.Parse(_CanAddLoan);
                CanAddLoanRepayment = bool.Parse(_CanAddLoanRepayment);
                CanViewRepaymentHistory = bool.Parse(_CanViewRepaymentHistory);
                CanViewLoanGuarantors = bool.Parse(_CanViewLoanGuarantors);
                CanEditLoan = bool.Parse(_CanEditLoan);
                CanDeleteLoan = bool.Parse(_CanDeleteLoan);
                //Shares Functionalities
                CanAddShares = bool.Parse(_CanAddShares);
                CanViewShares = bool.Parse(_CanViewShares);
                //Expenses Functionalities
                CanAddExpenses = bool.Parse(_CanAddExpenses);
                CanEditExpenses = bool.Parse(_CanEditExpenses);
                CanDeleteExpenses = bool.Parse(_CanDeleteExpenses);

                /// Define controls hide or disable?
                // btn_AddMember.Enabled = CanAddUser;
                ribbonPageGroupNewMember.Visible = CanAddUser;


                btn_membersaddnewmember.Enabled = CanAddUser;
                btn_AddKin.Enabled = CanAddKin;
                btn_viewmemberprofile.Enabled = CanViewMemberProfile;
                btn_edit_members.Enabled = CanEditUser;
                btn_delete_member.Enabled = CanDeleteUser;
                //Savings Functionalities
                btn_savings.Enabled = CanAddSavings;
                btn_dash_newSavings.Enabled = CanAddSavings;
                btn_withdrawal.Enabled = CanAddWithdrawal;
                btn_dash_newWithdrawal.Enabled = CanAddWithdrawal;
                btn_savings_account.Enabled = CanAddBulkSavings;
                //Loans Functionalities
                btn_dash_newloan.Enabled = CanAddLoan;
                btn_loan.Enabled = CanAddLoan;
                btn_repayloan.Enabled = CanAddLoanRepayment;
                btn_dash_newRepayment.Enabled = CanAddLoanRepayment;
                btn_dash_newBulkRepayment.Enabled = CanAddLoanRepayment;
               // btn_repayment_history.Enabled = CanViewRepaymentHistory;
                btn_loanGuarantors.Enabled = CanViewLoanGuarantors;
                btn_edit_loan.Enabled = CanEditLoan;
                btn_delete_loan.Enabled = CanDeleteLoan;
                //Expenses Functionalities
                btn_newgl.Enabled = CanAddExpenses;
                btn_dash_addExpense.Enabled = CanAddExpenses;
                btn_edit_expense.Enabled = CanEditExpenses;
                btn_delete_expense.Enabled = CanDeleteExpenses;
            }

            CreateNavigationMenu(ReportsNavigationTree, CanAddUser,
                                                        CanAddKin,
                                                        CanViewMemberProfile,
                                                        CanEditUser,
                                                        CanDeleteUser,
                                                        //Savings Functionalities
                                                        CanAddSavings,
                                                        CanAddWithdrawal,
                                                        CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        CanAddLoan,
                                                        CanAddLoanRepayment,
                                                        CanViewRepaymentHistory,
                                                        CanViewLoanGuarantors,
                                                        CanEditLoan,
                                                        CanDeleteLoan,
                                                        //Shares Functionalities
                                                        CanAddShares,
                                                        CanViewShares,
                                                        //Expenses Functionalities
                                                        CanAddExpenses,
                                                        CanEditExpenses,
                                                        CanDeleteExpenses);

            CreateNavigationMenu(MembersNavigationTree, CanAddUser,
                                                        CanAddKin,
                                                        CanViewMemberProfile,
                                                        CanEditUser,
                                                        CanDeleteUser,
                                                        //Savings Functionalities
                                                        CanAddSavings,
                                                        CanAddWithdrawal,
                                                        CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        CanAddLoan,
                                                        CanAddLoanRepayment,
                                                        CanViewRepaymentHistory,
                                                        CanViewLoanGuarantors,
                                                        CanEditLoan,
                                                        CanDeleteLoan,
                                                        //Shares Functionalities
                                                        CanAddShares,
                                                        CanViewShares,
                                                        //Expenses Functionalities
                                                        CanAddExpenses,
                                                        CanEditExpenses,
                                                        CanDeleteExpenses);

            CreateNavigationMenu(SavingsNavigationTree, CanAddUser,
                                                        CanAddKin,
                                                        CanViewMemberProfile,
                                                        CanEditUser,
                                                        CanDeleteUser,
                                                        //Savings Functionalities
                                                        CanAddSavings,
                                                        CanAddWithdrawal,
                                                        CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        CanAddLoan,
                                                        CanAddLoanRepayment,
                                                        CanViewRepaymentHistory,
                                                        CanViewLoanGuarantors,
                                                        CanEditLoan,
                                                        CanDeleteLoan,
                                                        //Shares Functionalities
                                                        CanAddShares,
                                                        CanViewShares,
                                                        //Expenses Functionalities
                                                        CanAddExpenses,
                                                        CanEditExpenses,
                                                        CanDeleteExpenses);
            CreateNavigationMenu(LoansNavigationTree, CanAddUser,
                                                        CanAddKin,
                                                        CanViewMemberProfile,
                                                        CanEditUser,
                                                        CanDeleteUser,
                                                        //Savings Functionalities
                                                        CanAddSavings,
                                                        CanAddWithdrawal,
                                                        CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        CanAddLoan,
                                                        CanAddLoanRepayment,
                                                        CanViewRepaymentHistory,
                                                        CanViewLoanGuarantors,
                                                        CanEditLoan,
                                                        CanDeleteLoan,
                                                        //Shares Functionalities
                                                        CanAddShares,
                                                        CanViewShares,
                                                        //Expenses Functionalities
                                                        CanAddExpenses,
                                                        CanEditExpenses,
                                                        CanDeleteExpenses);
            

            CreateNavigationMenu(ExpensesNavigationTree, CanAddUser,
                                                        CanAddKin,
                                                        CanViewMemberProfile,
                                                        CanEditUser,
                                                        CanDeleteUser,
                                                        //Savings Functionalities
                                                        CanAddSavings,
                                                        CanAddWithdrawal,
                                                        CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        CanAddLoan,
                                                        CanAddLoanRepayment,
                                                        CanViewRepaymentHistory,
                                                        CanViewLoanGuarantors,
                                                        CanEditLoan,
                                                        CanDeleteLoan,
                                                        //Shares Functionalities
                                                        CanAddShares,
                                                        CanViewShares,
                                                        //Expenses Functionalities
                                                        CanAddExpenses,
                                                        CanEditExpenses,
                                                        CanDeleteExpenses);

            CreateNavigationMenu(SystemNavigationTree, CanAddUser,
                                                        CanAddKin,
                                                        CanViewMemberProfile,
                                                        CanEditUser,
                                                        CanDeleteUser,
                                                        //Savings Functionalities
                                                        CanAddSavings,
                                                        CanAddWithdrawal,
                                                        CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        CanAddLoan,
                                                        CanAddLoanRepayment,
                                                        CanViewRepaymentHistory,
                                                        CanViewLoanGuarantors,
                                                        CanEditLoan,
                                                        CanDeleteLoan,
                                                        //Shares Functionalities
                                                        CanAddShares,
                                                        CanViewShares,
                                                        //Expenses Functionalities
                                                        CanAddExpenses,
                                                        CanEditExpenses,
                                                        CanDeleteExpenses);
            ////Define Dashboard
            dashboardViewer1.DashboardSource = typeof(Dashboards.MainDashboard);

        }

        private void CreateNavigationMenu(TreeList tl,  bool CanAddUser,
                                                        bool CanAddKin,
                                                        bool CanViewMemberProfile,
                                                        bool CanEditUser,
                                                        bool CanDeleteUser,
                                                        //Savings Functionalities
                                                        bool CanAddSavings,
                                                        bool CanAddWithdrawal,
                                                        bool CanAddBulkSavings,
                                                        //Loans Functionalities
                                                        bool CanAddLoan,
                                                        bool CanAddLoanRepayment,
                                                        bool CanViewRepaymentHistory,
                                                        bool CanViewLoanGuarantors,
                                                        bool CanEditLoan,
                                                        bool CanDeleteLoan,
                                                        //Shares Functionalities
                                                        bool CanAddShares,
                                                        bool CanViewShares,
                                                        //Expenses Functionalities
                                                        bool CanAddExpenses,
                                                        bool CanEditExpenses,
                                                        bool CanDeleteExpenses)
        {
            tl.BeginUnboundLoad();
            // Create a root node . 
            TreeListNode parentForRootNodes = null;

            /********************************************* Dasboard ****************************************************/

            TreeListNode DashboardNode = tl.AppendNode(
                new object[] { "Dashboards" },
                parentForRootNodes);
            // Create a child of the rootNode 
            tl.AppendNode(new object[] { "Members" }, DashboardNode);
            tl.AppendNode(new object[] { "Savings" }, DashboardNode);
            tl.AppendNode(new object[] { "Loans" }, DashboardNode);

            /********************************************* Approval Entries ********************************************/

            TreeListNode ApprovalEntriesNode = tl.AppendNode(
                new object[] { "Approval entries" },
                parentForRootNodes);
            // Create a child of the rootNode 
            TreeListNode ApprovalEntriesReportNodePending = tl.AppendNode(
                   new object[] { "Pending Approval Entries" },
                   ApprovalEntriesNode);

                TreeListNode ApprovalEntriesReportNodeApproved = tl.AppendNode(
                      new object[] { "Approved Entries" },
                      ApprovalEntriesNode);
                TreeListNode ApprovalEntriesReportNodeRejected = tl.AppendNode(
                      new object[] { "Rejected Entries" },
                      ApprovalEntriesNode);


            /****************************************** Members *************************************************/
            TreeListNode MembersNode = tl.AppendNode(
               new object[] { "Members" },
               parentForRootNodes);
                // Create a child of the rootNode 
                tl.AppendNode(new object[] { "Active Members" }, MembersNode);
                tl.AppendNode(new object[] { "Dormant Members" }, MembersNode);
                tl.AppendNode(new object[] { "Inactive Members" }, MembersNode);
            /******************************************** Savings ***********************************************/
            TreeListNode SavingsNode = tl.AppendNode(
               new object[] { "Savings" },
               parentForRootNodes);

               TreeListNode SavingsEntriesNode = tl.AppendNode(
                         new object[] { "Savings Entries" },
                         SavingsNode);

                        tl.AppendNode(new object[] { "Open Savings Entries" }, SavingsEntriesNode);
                        tl.AppendNode(new object[] { "Pending Approval Savings Entries" }, SavingsEntriesNode);
                        tl.AppendNode(new object[] { "Approved Savings Entries" }, SavingsEntriesNode);
                        tl.AppendNode(new object[] { "Rejected Savings Entries" }, SavingsEntriesNode);
               TreeListNode WithdrawalsEntriesNode = tl.AppendNode(
                       new object[] { "Withdrawals Entries" },
                       SavingsNode);

                        tl.AppendNode(new object[] { "Open Withdrawals Entries" }, WithdrawalsEntriesNode);
                        tl.AppendNode(new object[] { "Pending Approval Withdrawals Entries" }, WithdrawalsEntriesNode);
                        tl.AppendNode(new object[] { "Approved Withdrawals Entries" }, WithdrawalsEntriesNode);
                        tl.AppendNode(new object[] { "Rejected Withdrawals Entries" }, WithdrawalsEntriesNode);
            
                tl.AppendNode(new object[] { "Savings Accounts Balances" }, SavingsNode);
            /********************************************** Loans ***********************************************/
            TreeListNode LoansNode = tl.AppendNode(
               new object[] { "Loans" },
               parentForRootNodes);

                TreeListNode LoansReportNode1 = tl.AppendNode(
                   new object[] { "Loan Disbursement Entries" },
                   LoansNode);
                        tl.AppendNode(new object[] { "Open Disbursement Entries" }, LoansReportNode1);
                        tl.AppendNode(new object[] { "Pending Approval Disbursement Entries" }, LoansReportNode1);
                        tl.AppendNode(new object[] { "Approved Disbursement Entries" }, LoansReportNode1);
                        tl.AppendNode(new object[] { "Rejected Disbursement Entries" }, LoansReportNode1);
                TreeListNode LoansReportNode2 = tl.AppendNode(
                   new object[] { "Approved Loan Documents" },
                   LoansNode);
                        tl.AppendNode(new object[] { "Active Loans" }, LoansReportNode2);
                        tl.AppendNode(new object[] { "Defaulted Loans" }, LoansReportNode2);
                        tl.AppendNode(new object[] { "Settled Loans" }, LoansReportNode2);
                TreeListNode LoansReportNode3 = tl.AppendNode(
                       new object[] { "Loan Repayment Entries" },
                       LoansNode);
                        tl.AppendNode(new object[] { "Open Repayment Entries" }, LoansReportNode3);
                        tl.AppendNode(new object[] { "Pending Approval Repayment Entries" }, LoansReportNode3);
                        tl.AppendNode(new object[] { "Approved Repayment Entries" }, LoansReportNode3);
                        tl.AppendNode(new object[] { "Rejected Repayment Entries" }, LoansReportNode3);

            /********************************************* Shares & Dividends ************************************/
            //TreeListNode SharesDividendsNode = tl.AppendNode(
            //   new object[] { "Shares & Dividends" },
            //   parentForRootNodes);
            //// Create a child of the rootNode 
            //tl.AppendNode(new object[] { "Pending Approval" }, SharesDividendsNode);
            //tl.AppendNode(new object[] { "Approved" }, SharesDividendsNode);
            //tl.AppendNode(new object[] { "Rejected" }, SharesDividendsNode);
            ///*********************************************** Expenses ********************************************/
            //TreeListNode ExpensesNode = tl.AppendNode(
            //   new object[] { "Expenses" },
            //   parentForRootNodes);
            //// Create a child of the rootNode 
            //tl.AppendNode(new object[] { "Pending Approval" }, ExpensesNode);
            //tl.AppendNode(new object[] { "Approved" }, ExpensesNode);
            //tl.AppendNode(new object[] { "Rejected" }, ExpensesNode);
            ///************************************************* System Settings ************************************/
            // TreeListNode SystemSettingsNode = tl.AppendNode(
            //    new object[] { "System Settings" },
            //    parentForRootNodes);
            //// Create a child of the rootNode 
            //tl.AppendNode(new object[] { "Pending Approval" }, SystemSettingsNode);
            //tl.AppendNode(new object[] { "Approved"}, SystemSettingsNode);
            //tl.AppendNode(new object[] { "Rejected" }, SystemSettingsNode);



            /**************************************** Reports ****************************************************/

            TreeListNode ReportsNode = tl.AppendNode(
               new object[] { "Reports" },
               parentForRootNodes);
            // Create a child of the rootNode 
            tl.AppendNode(new object[] { "Members Report" }, ReportsNode);

            TreeListNode SavingsReportNode = tl.AppendNode(
            new object[] { "Savings" },
            ReportsNode);
            // Create a child of the rootNode 
            tl.AppendNode(new object[] { "Member Savings" }, SavingsReportNode);

            TreeListNode SaccoSavingsReportNode = tl.AppendNode(
            new object[] { "Sacco Savings" },
            SavingsReportNode);

            TreeListNode root3Node = tl.AppendNode(
              new object[] { "Loans" },
              ReportsNode);
            // Create a child of the rootNode 
            tl.AppendNode(new object[] { "Awarded Loans Report" }, root3Node);
            tl.AppendNode(new object[] { "Loan Balances Report" }, root3Node);
            tl.AppendNode(new object[] { "Loan Defaulters Report" }, root3Node);
            tl.AppendNode(new object[] { "Loan Repayment Statement" }, root3Node);
            /**************************************************** Financial Statements *******************************************************/


            TreeListNode FinancialStatementsNode = tl.AppendNode(
             new object[] { "Financial Statements" },
             ReportsNode);
            // Create a child of the rootNode 
            // tl.AppendNode(new object[] { "Balance Sheet" }, FinancialStatementsNode);
            tl.AppendNode(new object[] { "Profit and Loss statement" }, FinancialStatementsNode);

            /************************************************* General Ledger ****************************************************************/

            //TreeListNode GeneralLedgerNode = tl.AppendNode(
            //  new object[] { "General Ledger" },
            //  ReportsNode);
            //// Create a child of the rootNode 
            //tl.AppendNode(new object[] { "Trial Balance" }, GeneralLedgerNode);
            //tl.AppendNode(new object[] { "General Ledger Summary" }, GeneralLedgerNode);

            tl.EndUnboundLoad();
        }
        private void StartApp()
        {
            timer.Interval = (10 * 1000); // 10 secs
            timer.Tick += new EventHandler(timer_Tick);
            timer.Start();          
            notifyIcon.Text = AppResources.AppConstants.GetSoftwareName();

            btn_systembuy.Enabled = AppResources.AppFunctions.CheckIfAppIsActivated(AppResources.AppConstants.GetAppPassword(), AppResources.AppConstants.GetGlobalPath());
            
        }

        private void GetDefaulters()
        {
            int defaulters = EF.LoansQueries.GetLoanDefualterCount();

            if (defaulters > 0)
            {
                alertControl1.Show(this, "Notice!", "You have "+ defaulters.ToString() + " loan defaulter(s). Click to see actions");
            }
            timer.Stop();
        }

        private void SetTreeListFormatRules(TreeList tl)
        {
            tl.KeyFieldName = "Code";
            tl.ParentFieldName = "ParentCode";

            foreach (TreeListColumn column in tl.Columns)
            {
                column.OptionsColumn.AllowSort = false;
            }


            //Headings
            (tl.FormatRules[0].Rule as FormatConditionRuleExpression).Expression = "[AccountType] = \'Heading\'";
            tl.FormatRules[0].ApplyToRow = true;
            //Begin-Total
            (tl.FormatRules[1].Rule as FormatConditionRuleExpression).Expression = "[AccountType] = \'Begin-Total\'";
            tl.FormatRules[1].ApplyToRow = true;

            //End-Total
            (tl.FormatRules[2].Rule as FormatConditionRuleExpression).Expression = "[AccountType] = \'End-Total\'";
            tl.FormatRules[2].ApplyToRow = true;
        }

        private void timer_Tick(object sender, EventArgs e)
        {
            GetDefaulters();
        }
        private void getNot()
        {
            this.AppBackgroundWorker.RunWorkerAsync(2000);
        }

        private void btn_systemusers_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.SystemUsers.ViewSystemUsers _ViewSystemUsers = new Modules.SystemUsers.ViewSystemUsers();
            _ViewSystemUsers.ShowDialog();
        }

        private void btn_notifications_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.Notifications.NotificationSettings _NotificationSettings = new Modules.Settings.Notifications.NotificationSettings();
            _NotificationSettings.ShowDialog();
        }

        private void btn_notificationtemplates_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
           
        }

        private void btn_systemsupport_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Support _Support = new Support();
            _Support.ShowDialog();
        }

        private void btn_systemabout_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            About _About = new About();
            _About.ShowDialog();
        }

        private void btn_systembuy_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            RegisterSoftware _RegisterSoftware = new RegisterSoftware(AppResources.AppConstants.GetAppPassword(), AppResources.AppConstants.GetGlobalPath());
            _RegisterSoftware.ShowDialog();
        }

        private void btn_systeminfomation_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string strSysInfo = string.Empty;

            if (Utilities.SystemInformation.GetMsinfo32Path(ref strSysInfo))
            {
                Utilities.SystemInformation.StartSysInfo(strSysInfo);
            }
        }

        private void btn_approvaldocument_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.DocumentApprovals.ApprovalDocument _ApprovalDocument = new Modules.Settings.DocumentApprovals.ApprovalDocument();
            _ApprovalDocument.ShowDialog();
        }

        private void btn_documentapprovaluser_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.NumberSeries.AssignedNumberSeries _AssignedNumberSeries = new Modules.Settings.NumberSeries.AssignedNumberSeries();
            _AssignedNumberSeries.ShowDialog();
        }

        private void btn_documentnumbering_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.NumberSeries.NumberSeries _NumberSeries = new Modules.Settings.NumberSeries.NumberSeries();
            _NumberSeries.ShowDialog();
        }

        private void btn_saccobranch_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Branches.ViewBranches _ViewBranches = new Modules.Branches.ViewBranches();
            _ViewBranches.ShowDialog();
        }

        private void btn_viewmemberprofile_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if(MembershipNumber != null)
            {
                if (MembershipType =="Individual")
                {
                    Modules.SaccoMembers.SaccoMemberInformation _SaccoMemberInformation = new Modules.SaccoMembers.SaccoMemberInformation(MembershipNumber);
                    _SaccoMemberInformation.ShowDialog();
                }
                else if (MembershipType == "Group")
                {
                    Modules.SaccoMembers.GroupMembership.GroupMembership _GroupMembership = new Modules.SaccoMembers.GroupMembership.GroupMembership(MembershipNumber);
                    _GroupMembership.ShowDialog();
                }
                
            }            
        }

        private void btn_membersaddnewmember_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.SaccoMembers.SaccoMember _SaccoMember = new Modules.SaccoMembers.SaccoMember();
            _SaccoMember.ShowDialog();
        }

        private void btn_savings_account_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.SavingsWithdrawals.Savings.SavingsAccount _SavingsAccount = new Modules.SavingsWithdrawals.Savings.SavingsAccount();
            _SavingsAccount.ShowDialog();
        }

        private void btn_addsavingsaccount_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.Savings.SavingsAccountTypes _SavingsAccountTypes = new Modules.Settings.Savings.SavingsAccountTypes();
            _SavingsAccountTypes.ShowDialog();
        }

        private void MembersGridView_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            MembershipNumber = AppResources.DevexpressFunctions.GetItemrowClick(MembersGridView, "MembershipNumber");
            MembershipType = AppResources.DevexpressFunctions.GetItemrowClick(MembersGridView, "MembershipType");
        }

        private void MembersGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            MembershipNumber = AppResources.DevexpressFunctions.GetItemFocusedRowChanged(MembersGridView, sender, e, "MembershipNumber");
            MembershipType = AppResources.DevexpressFunctions.GetItemFocusedRowChanged(MembersGridView, sender, e, "MembershipType");
        }

        private void ReportsNavigationTree_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            AppResources.DevexpressFunctions.PaintTreeNodes(ReportsNavigationTree, e);
        }

        private void btn_viewapprovalusers_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.DocumentApprovals.DocumentApprovers _DocumentApprovers = new Modules.Settings.DocumentApprovals.DocumentApprovers();
            _DocumentApprovers.ShowDialog();
        }

        private void SystemNavigationTree_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            AppResources.DevexpressFunctions.PaintTreeNodes(SystemNavigationTree, e);
        }

        private void ExpensesNavigationTree_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            AppResources.DevexpressFunctions.PaintTreeNodes(ExpensesNavigationTree, e);
        }

        private void LoansNavigationTree_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            AppResources.DevexpressFunctions.PaintTreeNodes(LoansNavigationTree, e);
        }

        private void SavingsNavigationTree_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            AppResources.DevexpressFunctions.PaintTreeNodes(SavingsNavigationTree, e);
        }

        private void MembersNavigationTree_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            AppResources.DevexpressFunctions.PaintTreeNodes(MembersNavigationTree, e);
        }

        private void btn_assignnotificationtemplate_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.Notifications.DocumentTemplates _DocumentTemplates = new Modules.Settings.Notifications.DocumentTemplates();
            _DocumentTemplates.ShowDialog();
        }
        //Navigation
        private void ReportsNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.ReportsNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void ReportsNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.ReportsNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void MembersNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.MembersNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void MembersNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.MembersNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void SavingsNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.SavingsNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void SavingsNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.SavingsNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void LoansNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.LoansNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void LoansNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.LoansNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void SharesDividendsNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.SharesDividendsNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void SharesDividendsNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.SharesDividendsNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void ExpensesNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.ExpensesNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void ExpensesNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.ExpensesNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void SystemNavigationTree_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            SaccoBook.Navigation.SystemNavigation.Navigate(e, ReportsNavigationTree, this);
        }

        private void SystemNavigationTree_DoubleClick(object sender, EventArgs e)
        {
            TreeList tree = sender as TreeList;
            TreeListHitInfo hi = tree.CalcHitInfo(tree.PointToClient(Control.MousePosition));
            if (hi.Node != null)
            {
                string ChildNode = hi.Node.GetValue(ReportsNavigationTree.Columns[0]).ToString();

                SaccoBook.Navigation.SystemNavigation.NavigateDoubleClick(ChildNode, this);
            }
        }

        private void btn_savings_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.SavingsWithdrawals.Savings.MakeSaving _MakeSaving = new Modules.SavingsWithdrawals.Savings.MakeSaving();
            _MakeSaving.ShowDialog();
        }

        private void btn_withdrawal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal _MakeWithdrawal = new Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal();
            _MakeWithdrawal.ShowDialog();
        }

        private void btn_creditproduct_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.Loans.LoanProducts _LoanProduct = new Modules.Settings.Loans.LoanProducts();
            _LoanProduct.ShowDialog();
        }

        private void btn_loan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Loans.LoanDisbursement _LoanDisbursement = new Modules.Loans.LoanDisbursement();
            _LoanDisbursement.ShowDialog();
        }

        private void btn_repayloan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Loans.LoanRepayment _LoanRepayment = new Modules.Loans.LoanRepayment();
            _LoanRepayment.ShowDialog();
        }

        private void btn_memberlistrpt_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Reports.Members.MemberList _MemberList = new Reports.Members.MemberList();
            AppResources.DevexpressFunctions.LoadReport(_MemberList, this);
        }

        private void Dashboard_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true;

            Hide();

            string ActiveSkinName = UserLookAndFeel.Default.SkinName;

            AppResources.XMLFormatter.UpdateXMLNode(ActiveSkinName);

            Environment.Exit(0);
        }

        private void btn_edit_members_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (MembershipNumber != null)
            {
                Modules.SaccoMembers.SaccoMember _SaccoMember = new Modules.SaccoMembers.SaccoMember(MembershipNumber, true);
                _SaccoMember.ShowDialog();
            }                
        }

        private void btn_delete_member_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (MembershipNumber != null)
            {
                DialogResult dlr = XtraMessageBox.Show("Are you sure you want to delete record?", "System Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (dlr == DialogResult.Yes)
                {
                    if (MembershipNumber != null)
                    {
                        if (EF.MemberQueries.DeleteMember(MembershipNumber))
                        {
                            MembershipNumber = null;
                            XtraMessageBox.Show("The specified record has been successfully deleted", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
            }            
        }

        private void btn_refresh_members_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Load Members List
            SplashScreenManager.ShowForm(this, typeof(AppWaitForm), true, true, false);
            SplashScreenManager.Default.SetWaitFormCaption("Please wait");
            SplashScreenManager.Default.SetWaitFormDescription("Refreshing...");
            string sqlMembers = EF.MemberQueries.LoadMembersRecords();

            AppResources.AppFunctions.LoadTable(MembersGridControl, MembersGridView, sqlMembers);
            SplashScreenManager.CloseForm();
        }

        private void btn_edit_savings_withdrawal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (SavingsWithdrawalDocumentNo != null || SavingsWithdrawalDocumentNo != "")
            {
                if (SavingsWithdrawalDocumentType == "Saving")
                {
                    Modules.SavingsWithdrawals.Savings.MakeSaving _MakeSaving = new Modules.SavingsWithdrawals.Savings.MakeSaving(SavingsWithdrawalDocumentNo, true);
                    _MakeSaving.ShowDialog();
                }
                else if (SavingsWithdrawalDocumentType == "Withdrawal")
                {
                    Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal _MakeWithdrawal = new Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal(SavingsWithdrawalDocumentNo, true);
                    _MakeWithdrawal.ShowDialog();
                }
            }
        }

        private void btn_delete_savings_withdrawal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (SavingsWithdrawalDocumentNo != null || SavingsWithdrawalDocumentNo != "")
            {
                DialogResult dlr = XtraMessageBox.Show("Are you sure you want to delete record?", "System Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (dlr == DialogResult.Yes)
                {
                    if (SavingsWithdrawalDocumentNo != null)
                    {
                        if (EF.SavingsQueries.DeleteSaving(SavingsWithdrawalDocumentNo))
                        {
                            SavingsWithdrawalDocumentNo = null;

                            XtraMessageBox.Show("The specified record has been successfully deleted", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
            }
        }

        private void btn_refresh_savings_withdrawal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Load open savings records
            SplashScreenManager.ShowForm(this, typeof(AppWaitForm), true, true, false);
            SplashScreenManager.Default.SetWaitFormCaption("Please wait");
            SplashScreenManager.Default.SetWaitFormDescription("Refreshing...");

            string sqlSavings = EF.SavingsQueries.LoadDashSavingsWithdrawalsRecords("Open");

            AppResources.AppFunctions.LoadTable(gridControlSavings, gridViewSavings, sqlSavings);

            SplashScreenManager.CloseForm();
        }

        private void btn_send4Approval_savings_withdrawal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (SavingsWithdrawalDocumentNo != null || SavingsWithdrawalDocumentNo != "")
            {
                if (SavingsWithdrawalDocumentType == "Saving")
                {
                    if(Modules.SavingsWithdrawals.Savings.MakeSaving.SendApprovalRequest(SavingsWithdrawalDocumentNo))
                    {
                        XtraMessageBox.Show("An approval request sent to the approver", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }                
                }
                else if (SavingsWithdrawalDocumentType == "Withdrawal")
                {
                    if (Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal.SendApprovalRequest(SavingsWithdrawalDocumentNo))
                    {
                        XtraMessageBox.Show("An approval request sent to the approver", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
        }

        private void gridViewSavings_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            SavingsWithdrawalDocumentNo = AppResources.DevexpressFunctions.GetItemFocusedRowChanged(gridViewSavings, sender, e, "DocumentNumber");
            SavingsWithdrawalDocumentType = AppResources.DevexpressFunctions.GetItemFocusedRowChanged(gridViewSavings, sender, e, "TransactionType"); 
        }

        private void gridViewSavings_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            SavingsWithdrawalDocumentNo = AppResources.DevexpressFunctions.GetItemrowClick(gridViewSavings, "DocumentNumber");
            SavingsWithdrawalDocumentType = AppResources.DevexpressFunctions.GetItemrowClick(gridViewSavings, "TransactionType");
        }

        private void btn_edit_loan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (LoanDocumentNo != null)
            {
                Modules.Loans.LoanDisbursement _LoanDisbursement = new Modules.Loans.LoanDisbursement(LoanDocumentNo, true, false);
                _LoanDisbursement.ShowDialog();
            }
        }

        private void btn_delete_loan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (LoanDocumentNo != null)
            {
                DialogResult dlr = XtraMessageBox.Show("Are you sure you want to delete record?", "System Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (dlr == DialogResult.Yes)
                {
                    if (EF.LoansQueries.DeleteLoanRecord(LoanDocumentNo))
                    {
                        LoanDocumentNo = null;
                        XtraMessageBox.Show("The specified record has been successfully deleted", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
        }

        private void btn_refresh_loans_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Load open loans records
            SplashScreenManager.ShowForm(this, typeof(AppWaitForm), true, true, false);
            SplashScreenManager.Default.SetWaitFormCaption("Please wait");
            SplashScreenManager.Default.SetWaitFormDescription("Refreshing...");

            string sqlLoans = EF.LoansQueries.LoadLoanDisbursementEntries("Open");

            AppResources.AppFunctions.LoadTable(gridControlLoans, gridViewLoans, sqlLoans);
            SplashScreenManager.CloseForm();
        }

        private void btn_sendapproval4loan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (LoanDocumentNo != null)
            {
                if (Modules.Loans.LoanDisbursement.SendApprovalRequest(LoanDocumentNo))
                {
                    XtraMessageBox.Show("An approval request sent to the approver", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void gridViewLoans_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            LoanDocumentNo = AppResources.DevexpressFunctions.GetItemFocusedRowChanged(gridViewLoans, sender, e, "DocumentNumber");
        }

        private void gridViewLoans_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            LoanDocumentNo = AppResources.DevexpressFunctions.GetItemrowClick(gridViewLoans, "DocumentNumber");
        }

        private void Dashboard_FormClosed(object sender, FormClosedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void AppBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            if (AppResources.AppConstants.IsSytemNotificationsEnabled())
            {
                Utilities.BackgroundTasksManager _BackgroundTasksManager = new Utilities.BackgroundTasksManager();
                _BackgroundTasksManager.BackgroundWorker_DoWork(sender, e);
            }               
        }

        private void btn_saccoinformation_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.Settings.Sacco.SaccoInformation _SaccoInformation = new Modules.Settings.Sacco.SaccoInformation();
            _SaccoInformation.ShowDialog();
        }

        private void btn_add_group_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SaccoBook.Modules.SaccoMembers.GroupMembership.GroupMembership _AddGroupMembership = new Modules.SaccoMembers.GroupMembership.GroupMembership();
            _AddGroupMembership.ShowDialog();
        }

        private void alertControl1_FormLoad(object sender, DevExpress.XtraBars.Alerter.AlertFormLoadEventArgs e)
        {
            e.Buttons.PinButton.SetDown(true);
        }

        private void alertControl1_AlertClick(object sender, DevExpress.XtraBars.Alerter.AlertClickEventArgs e)
        {
            Modules.Loans.ViewLoans _ViewLoans = new Modules.Loans.ViewLoans("Defaulted", "Defaulted Loans", "Disbursement");
            _ViewLoans.ShowDialog();
        }

        private void MembersGridView_DoubleClick(object sender, EventArgs e)
        {
            if (MembershipNumber != null)
            {
                if (MembershipType == "Individual")
                {
                    Modules.SaccoMembers.SaccoMemberInformation _SaccoMemberInformation = new Modules.SaccoMembers.SaccoMemberInformation(MembershipNumber);
                    _SaccoMemberInformation.ShowDialog();
                }
                else if (MembershipType == "Group")
                {
                    Modules.SaccoMembers.GroupMembership.GroupMembership _GroupMembership = new Modules.SaccoMembers.GroupMembership.GroupMembership(MembershipNumber);
                    _GroupMembership.ShowDialog();
                }

            }
        }

        private void gridViewSavings_DoubleClick(object sender, EventArgs e)
        {
            if (SavingsWithdrawalDocumentNo != null || SavingsWithdrawalDocumentNo != "")
            {
                if (SavingsWithdrawalDocumentType == "Saving")
                {
                    Modules.SavingsWithdrawals.Savings.MakeSaving _MakeSaving = new Modules.SavingsWithdrawals.Savings.MakeSaving(SavingsWithdrawalDocumentNo, true);
                    _MakeSaving.ShowDialog();
                }
                else if (SavingsWithdrawalDocumentType == "Withdrawal")
                {
                    Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal _MakeWithdrawal = new Modules.SavingsWithdrawals.Withdrawal.MakeWithdrawal(SavingsWithdrawalDocumentNo, true);
                    _MakeWithdrawal.ShowDialog();
                }
            }
        }

        private void gridViewLoans_DoubleClick(object sender, EventArgs e)
        {
            if (LoanDocumentNo != null)
            {
                Modules.Loans.LoanDisbursement _LoanDisbursement = new Modules.Loans.LoanDisbursement(LoanDocumentNo, true, false);
                _LoanDisbursement.ShowDialog();
            }
        }
        //create a pop up menu
        private void MembersGridView_PopupMenuShowing(object sender, DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.MenuType == DevExpress.XtraGrid.Views.Grid.GridMenuType.Row)
            {
                int rowHandle = e.HitInfo.RowHandle;
                // Delete existing menu items, if any. 
                e.Menu.Items.Clear();
                // Add the Rows submenu with the 'Delete Row' command 
                e.Menu.Items.Add(CreateDeleteSubMenuRow(view, rowHandle));
                e.Menu.Items.Add(CreateViewKinsSubMenuRows(view, rowHandle));
            }
        }

        DXMenuItem CreateDeleteSubMenuRow(GridView view, int rowHandle)
        {
            DXSubMenuItem subMenu = new DXSubMenuItem("Rows");

            string deleteRowsCommandCaption;
            if (view.IsGroupRow(rowHandle))
                deleteRowsCommandCaption = "&Delete rows in this group";
            else
                deleteRowsCommandCaption = "&Delete this row";
            DXMenuItem menuItemDeleteRow = new DXMenuItem(deleteRowsCommandCaption, new EventHandler(OnDeleteRowClick), imageCollection1.Images[0]);
            menuItemDeleteRow.Tag = new RowInfo(view, rowHandle);
            menuItemDeleteRow.Enabled = view.IsDataRow(rowHandle) || view.IsGroupRow(rowHandle);
            subMenu.Items.Add(menuItemDeleteRow);
            return menuItemDeleteRow;
        }

        void OnDeleteRowClick(object sender, EventArgs e)
        {
            DXMenuItem menuItem = sender as DXMenuItem;
            RowInfo ri = menuItem.Tag as RowInfo;
            if (ri != null)
            {
                string message = menuItem.Caption.Replace("&", "");
                if (XtraMessageBox.Show(message + " ?", "Confirm operation", MessageBoxButtons.YesNo) != DialogResult.Yes)
                    return;
                ri.View.DeleteRow(ri.RowHandle);
            }
        }
        DXMenuItem CreateViewKinsSubMenuRows(GridView view, int rowHandle)
        {
            DXSubMenuItem subMenu = new DXSubMenuItem("Rows");

            string viewKinRowsCommandCaption;
            viewKinRowsCommandCaption = "&View Kins";
            DXMenuItem menuItemViewKinRow = new DXMenuItem(viewKinRowsCommandCaption, new EventHandler(OnViewKinsClick), imageCollection1.Images[2]);
            menuItemViewKinRow.Tag = new RowInfo(view, rowHandle);
            menuItemViewKinRow.Enabled = true;
            subMenu.Items.Add(menuItemViewKinRow);
            return menuItemViewKinRow;
        }

        void OnViewKinsClick(object sender, EventArgs e)
        {
            if (MembershipNumber != null)
            {
                Modules.SaccoMembers.Kins.ViewKins _ViewKins = new Modules.SaccoMembers.Kins.ViewKins(MembershipNumber);
                _ViewKins.ShowDialog();
            }            
        }

        private void btn_refreshcoa_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Load open savings records
            SplashScreenManager.ShowForm(this, typeof(AppWaitForm), true, true, false);
            SplashScreenManager.Default.SetWaitFormCaption("Please wait");
            SplashScreenManager.Default.SetWaitFormDescription("Refreshing...");

            string sqlGLAccounts = EF.GeneralLedgerQueries.GetGeneralLedgerAccounts();
            SetTreeListFormatRules(treeListGL);
            treeListGL.ExpandAll();

            AppResources.AppFunctions.LoadTreeList(treeListGL,  sqlGLAccounts);
            SplashScreenManager.CloseForm();
        }

        private void btn_newgl_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.GeneralLedger.GLAccount _GLAccount = new Modules.GeneralLedger.GLAccount();
            _GLAccount.ShowDialog();
        }

        private void btn_paymentjournal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.GeneralLedger.PaymentJournal _PaymentJournal = new Modules.GeneralLedger.PaymentJournal();
            _PaymentJournal.ShowDialog();
        }

        private void btn_cashreceiptjournal_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Modules.GeneralLedger.CashReceiptJournal _CashReceiptJournal = new Modules.GeneralLedger.CashReceiptJournal();
            _CashReceiptJournal.ShowDialog();
        }
    }
}